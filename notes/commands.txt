
PyModel Commands

PyModel provides three main programs:

 pma.py, PyModel analyzer: generates a finite state machine (FSM) 
   and computes properties by exploring a model program, FSM, test suite, 
   or a product of these.
 
 pmg.py, PyModel graphics: generates a file of graphic commands from an FSM,
   that can be processed by the Graphviz dot command to produce graphics
   files in various formats including .svg, .pdf, and .ps
 
 pmt.py, PyModel tester: displays traces, generates tests offline, 
   executes offline tests, or generates and executes tests on-the-fly.

There is also a fourth program:

 pmv.py, PyModel viewer: invokes pma, pmg, and the Graphiz dot command
   (to display the graphics generated by pmg).  The pmv program
   provides brevity and convenience, so analysis and display can be
   accomplished by a single command.

Use pma, pmg, and dot (or pmv) to visualize and preview the behavior
of pmt.  Every path through the graph created by pma (and drawn by
pmg) is a trace (test run) that may be generated by pmt, when pma and
pmt are invoked with the same arguments.

PyModel also provides these programs and scripts:

 dotsvg: converts dot file output from pmg.py to SVG file that can be displaye
         in a browser.

 dotps: converts dot file output from pmg.py to PostScript file that can be 
         printed or displayed in PostScript viewer.

 dotpdf: converts dot file output from pmg.py to PDF file that can be 
         printed or displayed in a PDF viewer.

 (The pmv command invokes one of these dot commands)

 wsgirunner.py: runs WSGI-compliant web applications (for example
                webapp.py in the WebApplication sample) on localhost

 trun.py: runs sample demonstrations and scripts that test PyModel itself.

 clogdiff: works with trun.py to execute and check regression tests on PyModel.

You can invoke the four PyModel programs on the command line or in
scripts by name, without using the .py extension (pmt not pmt.py).
You can also include the .py extension; many of the test scripts
included in the distribution use this form.

To prepare to use the programs, put the pymodel directory on your
execution path.  Put the current directory (whatever it is) on the
PYTHONPATH by executing the tpath command ("source tpath" in bash,
systems, just "tpath" in Windows).

For usage examples with many combinations of options and arguments,
see the test*.py test script modules in the samples directories.

For more about each program, type the command to display its built-in
help, for example: pma --help, or pma -h, or just pma (with no
arguments).  This will print a brief description of the program and a
list of its command line options.  (For convenience, this built-in help
output appears here in pma.txt etc.)


Revised Apr 2013
